%generate times2 [Int] Int
%generate cons [Int, Sll[readonly]] Sll
%generate fold_List [Int, Sll[readonly]] (Ptr Int)
%generate zipWith [Sll[readonly], Sll[readonly]] Sll
%generate filterLt9 [Sll[readonly]] Sll
%generate sum [Sll[readonly]] Int
%generate constNil[Sll[readonly]] Sll
%generate car [Sll[readonly]] Int
%generate sumTailRec [Sll[readonly], Int] Int
%generate take [Int, Sll[readonly]] Sll
%generate const [Sll[readonly], Sll[readonly]] Sll
%generate leftList [TreeLayout[readonly]] Sll
%generate singleton [Int] Sll
%generate even [Sll[readonly]] Sll
%generate odd [Sll[readonly]] Sll
%generate append [Sll[readonly], Sll[readonly]] Sll
%generate map_sum [ListOfListsLayout[readonly]] Sll
%generate maximum_sum [ListOfListsLayout[readonly]] Int
%generate flatten [ListOfListsLayout[readonly]] Sll
%generate snoc [Sll[readonly], Int] Sll
%generate reverse [Sll[readonly]] Sll
%generate zip [Sll[readonly], Sll[readonly]] ZippedLayout
%generate replicate [Int, Int] Sll
-- %generate map [Sll[readonly]] Sll
%generate mapTimes2 [Sll[readonly]] Sll
%generate maximum [Sll[readonly]] Int
-- %generate foldMap[Int, Sll[mutable]] Int
%generate selfAppend[Sll[readonly]] Sll
%generate scanr[Int, Sll[readonly]] Sll
%generate foldPlus[Sll[readonly]] Int

data List := Nil | Cons Int List;

data Tree := Leaf | Node Int Tree Tree;

data ListOfLists := LNil | LCons List ListOfLists;

data Zipped := ZNil | ZCons Int Int Zipped;

data Pair := MkPair Int Int;

data PairList := PNil | PCons Pair PairList;

Sll : List >-> layout[x];
Sll (Nil) := emp;
Sll (Cons head tail) := x :-> head, (x+1) :-> tail, Sll tail;

TreeLayout : Tree >-> layout[x];
TreeLayout (Leaf) := emp;
TreeLayout (Node payload left right) :=
  x :-> payload,
  (x+1) :-> left,
  (x+2) :-> right,
  TreeLayout left,
  TreeLayout right;

ListOfListsLayout : ListOfLists >-> layout[x];
ListOfListsLayout (LNil) := emp;
ListOfListsLayout (LCons head tail) :=
  x :-> head, (x+1) :-> tail, ListOfListsLayout tail,
  Sll head;

ZippedLayout : Zipped >-> layout[x];
ZippedLayout (ZNil) := emp;
ZippedLayout (ZCons fst snd rest) :=
  x :-> fst,
  (x+1) :-> snd,
  (x+2) :-> rest,
  ZippedLayout rest;

PairLayout : Pair >-> layout[x];
PairLayout (MkPair fst snd) :=
  x :-> fst,
  (x+1) :-> snd;

PairListLayout : PairList >-> layout[x];
PairListLayout (PNil) := emp;
PairListLayout (PCons head tail) :=
  x :-> head,
  (x+1) :-> tail,
  PairListLayout tail,
  PairLayout head;

map_sum : ListOfLists -> List;
map_sum (LNil) := Nil;
map_sum (LCons xs xss) := Cons (instantiate [Sll[readonly]] Int sum xs) (map_sum xss);

maximum_sum : ListOfLists -> Int;
maximum_sum xss := instantiate [Sll[mutable]] Int maximum (instantiate [ListOfListsLayout[readonly]] Sll map_sum xss);

const : List -> List -> List;
const (Nil) (Nil) := Nil;
const (Cons x xs) (Cons y ys) := Cons x xs;
const (Cons x xs) (Nil) := Cons x xs;
const (Nil) (Cons y ys) := Nil;

constNil : List -> List;
constNil (Nil) := Nil;
constNil (Cons head tail) := Nil;

cons : Int -> List -> List;
cons x xs := Cons x xs;

car : List -> Int;
car (Nil) := 0;
car (Cons x xs) := x;

singleton : Int -> List;
singleton x := Cons x (Nil);

filterLt9 : List -> List;
filterLt9 (Nil) := Nil;
filterLt9 (Cons head tail)
  | head < 9       := filterLt9 tail;
  | not (head < 9) := Cons head (filterLt9 tail);

leftList : Tree -> List;
leftList (Leaf) := Nil;
leftList (Node a b c) := Cons a (leftList b);

even : List -> List;
even (Nil) := Nil;
even (Cons head tail) := instantiate [Sll[readonly]] Sll odd tail;

odd : List -> List;
odd (Nil) := Nil;
odd (Cons head tail) := Cons head (instantiate [Sll[readonly]] Sll even tail);

sum : List -> Int;
sum (Nil) := 0;
sum (Cons head tail) := head + (sum tail);

sumTailRec : List -> Int -> Int;
sumTailRec (Nil) acc := acc;
sumTailRec (Cons head tail) acc := sumTailRec tail (head + acc);

replicate : Int -> Int -> List;
replicate n i
  | n == 0 := Nil;
  | not (n == 0) := Cons i (replicate (n - 1) i);

take : Int -> List -> List;
take i (Nil) := Nil;
take i (Cons head tail)
  | i == 0 := Nil;
  | not (i == 0) := Cons head (take (i - 1) tail);

maximum : List -> Int;
maximum (Nil) := 0;
maximum (Cons x xs) :=
  let i := maximum xs
  in
  if i < x
    then x
    else i;

append : List -> List -> List;
append (Nil) ys := ys;
append (Cons x xs) ys := instantiate [Ptr Int, Sll[mutable]] Sll cons (addr x) (append xs ys);

selfAppend : List -> List;
selfAppend xs :=
  instantiate [Sll[readonly], Sll[readonly]] Sll append xs xs;

flatten : ListOfLists -> List;
flatten (LNil) := Nil;
flatten (LCons xs xss) := instantiate [Sll[readonly], Sll[mutable]] Sll append xs (flatten xss);

snoc : List -> Int -> List;
snoc (Nil) i := Cons i (Nil);
snoc (Cons x xs) i := Cons x (snoc xs i);

reverse : List -> List;
reverse (Nil) := Nil;
reverse (Cons x xs) := instantiate [Sll[mutable], Int] Sll snoc (reverse xs) x;

zip : List -> Zipped;
zip (Nil) ys := ZNil;
zip xs (Nil) := ZNil;
zip (Cons x xs) (Cons y ys) := ZCons x y (zip xs ys);

zipWith : List -> List -> List;
zipWith (Nil) (Nil) := Nil;
zipWith (Nil) (Cons y ys) := Nil;
zipWith (Cons x xs) (Nil) := Nil;
zipWith (Cons x xs) (Cons y ys) := Cons (instantiate [Int, Int] Int f x y) (zipWith xs ys);

fold_List : Int -> List -> Ptr Int;
fold_List z (Nil) := z;
fold_List z (Cons x xs) := instantiate [Ptr Int, Ptr Int] (Ptr Int) f (addr x) (fold_List z xs);

foldr : (Ptr Int -> Ptr Int -> Ptr Int) -> List -> Ptr Int;
foldr f z (Nil) := z;
foldr f z (Cons x xs) := instantiate [Ptr Int, Ptr Int] (Ptr Int) f (addr x) (foldr f z xs);


foldPlus : List -> Ptr Int;
foldPlus xs := instantiate [Ptr Int -> Ptr Int -> Ptr Int, Int, Sll[readonly]] (Ptr Int) foldr plus 0 xs;

plus : Int -> Int -> Int;
plus x y := x + y;

-- foldMap : Int -> List -> Int;
-- foldMap z (Nil) := z;
-- foldMap z (Cons x xs) := instantiate [Int, Sll[mutable]] Int fold_List z (instantiate [Sll[readonly]] Sll map (lower Sll[readonly] (Cons x xs)));

map : (Int -> Int) -> List -> List;
map f (Nil) := Nil;
map f (Cons x xs) := Cons (instantiate [Int] Int f x) (map f xs);

times2 : Int -> Int;
times2 x := x * 2;

mapTimes2 : List -> List;
mapTimes2 xs := instantiate [Int -> Int, Sll[readonly]] Sll map times2 xs;

-- mapTimes2 : List -> List;
-- mapTimes2 (Nil) := Nil;
-- mapTimes2 (Cons x xs) :=
--   let y := x * 2
--   in
--   Cons y (mapTimes2 xs);

-- let { scr f z [] = [z] ; scr f z (x:xs) = let { nxt = scr f z xs; r = f x (head nxt) } in r : nxt }

scanr : Int -> List -> List;
scanr z (Nil) := Cons z (Nil);
scanr z (Cons x xs) :=
  let xs2 := scanr z xs
  in
  let x2 := instantiate [Int, Int] Int f x (instantiate [Sll[mutable]] Int head xs2)
  in
  Cons x2 xs2;

